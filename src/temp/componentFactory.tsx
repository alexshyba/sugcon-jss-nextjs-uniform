import loadable from 'react-loadable-visibility/loadable-components';

// Do not modify anything within the `<auto-generated-imports />` comments.
// The content within those comments is automatically generated by
// the `/scripts/generate-component-factory.js` script.

// <auto-generated-imports>


import {
Hero,
WaveSplitter
} from '../components';

const components = new Map();

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('CtaBlock', loadable(() => import(/* webpackChunkName: "CtaBlock" */'../components/CtaBlock')))

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('CtaSection', loadable(() => import(/* webpackChunkName: "CtaSection" */'../components/CtaSection')))
components.set('Hero', Hero);

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('MapBlock', loadable(() => import(/* webpackChunkName: "MapBlock" */'../components/MapBlock')))

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('PricingSection', loadable(() => import(/* webpackChunkName: "PricingSection" */'../components/PricingSection')))

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('Speakers', loadable(() => import(/* webpackChunkName: "Speakers" */'../components/Speakers')))

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('TeaserSection', loadable(() => import(/* webpackChunkName: "TeaserSection" */'../components/TeaserSection')))

// NOTE: 'import' paths _must_ be static in order for webpack to be able to analyze them at build time.
components.set('VideoBlock', loadable(() => import(/* webpackChunkName: "VideoBlock" */'../components/VideoBlock')))
components.set('WaveSplitter', WaveSplitter);

// </auto-generated-imports>


export default function componentFactory(componentName: string) {
  return components.get(componentName);
}
